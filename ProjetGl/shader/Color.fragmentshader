#version 330 core

in vec3 UV;
in vec4 vertexPosition_world;
in vec4 EyeDirection_camera;
in vec4 LightDirection_camera;
in vec4 Normal_camera;

// Output data; correspond to vertex color
out vec3 color;

uniform vec3 m_fragColor;

void main(){
	// Light emission definition. Can be moved to C++
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 10.0f;
	vec4 LightPosition = vec4(0,5,0,1);

	// Material properties
	vec3 MaterialDiffuseColor = m_fragColor;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition - vertexPosition_world );

	vec4 n = normalize( Normal_camera );
	vec4 l = normalize( LightDirection_camera );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	vec4 E = normalize(EyeDirection_camera);
	vec4 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	color = 

		MaterialAmbientColor;
	for(int n = 0; n <= 10; n++){
	vec4 LightPosition = vec4(n*5-2.5,2.5,1.5,1);
	float distance = length( LightPosition - vertexPosition_world );
	color = color + 

		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
	
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);	

	}
}